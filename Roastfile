#!/usr/bin/env python3
# vim: set tabstop=4 shiftwidth=4 expandtab filetype=python

import copy, os, luminaire.toolchain
import source.builder.clang_tidy

Frontend.target("ARCH",{"x86_64"},"x86_64")
Frontend.target("MODE",{"test","debug","sanitize"},"test")

def condition(source):
    a = os.path.splitext(source)[1] == ".cc"
    b = os.path.splitext(source)[1] == ".cpp"
    c = os.path.isfile(source)
    return (a or b) and c
def transform(header):
    source = os.path.splitext(header)[0] + ".cc"
    source = source.replace("include","src")
    if condition(source): return source
    source = os.path.splitext(header)[0] + ".cpp"
    source = source.replace("include","src")
    return source if condition(source) else None

def add_sanitizers(builder):
    sanitizers = []
    sanitizers.append("address")
    sanitizers.append("alignment")
    sanitizers.append("bool")
    sanitizers.append("bounds")
    sanitizers.append("enum")
    sanitizers.append("float-cast-overflow")
    sanitizers.append("float-divide-by-zero")
    sanitizers.append("integer-divide-by-zero")
    sanitizers.append("nonnull-attribute")
    sanitizers.append("null")
    sanitizers.append("nullability-arg")
    sanitizers.append("nullability-assign")
    sanitizers.append("nullability-return")
    sanitizers.append("pointer-overflow")
    sanitizers.append("return")
    sanitizers.append("returns-nonnull-attribute")
    sanitizers.append("shift")
    sanitizers.append("signed-integer-overflow")
    sanitizers.append("unreachable")
    sanitizers.append("unsigned-integer-overflow")
    sanitizers.append("vla-bound")
    sanitizers_string = "-fsanitize={0}".format(",".join(sanitizers))
    builder.append_cflag(sanitizers_string)
    builder.append_lflag(sanitizers_string)

def add_lto(builder):
    builder.append_cflag("-flto")
    builder.append_lflag("-flto")
    builder.append_lflag("-x ir")
    builder.append_lflag("-Wl,-plugin-opt=save-temps")

def add_ikos(builder):
    builder.append_cflag("-save-temps=obj")



@Frontend.first
def configure(context):
    luminaire.toolchain.AUTOMATIC_CXX_BUILDER(context,"builder")
    context.builder.append_cflag("-DUTL_BUILD_NOCXX=1")
    context.builder.append_cflag("-DCPPUTEST_USE_STD_C_LIB=1")
    context.builder.append_cflag("-DCPPUTEST_USE_STD_CPP_LIB=0")
    context.builder.append_cflag("-DCPPUTEST_USE_MEM_LEAK_DETECTION=0")
    context.builder.append_cflag("-DUTL_ENABLE_NEW_DELETE")
    context.builder.append_cflag("-std=c++20")
    context.builder.append_cflag("-Werror")
    context.builder.append_cflag("-Weverything")
    # relax some of the extreme constraints
    context.builder.append_cflag("-Wno-c++98-compat")
    context.builder.append_cflag("-Wno-c++98-compat-pedantic")
    context.builder.append_cflag("-Wno-c++20-compat")
    context.builder.append_cflag("-Wno-weak-vtables")
    context.builder.append_cflag("-Wno-padded")
    context.builder.append_cflag("-Wno-extra-semi-stmt")
    context.builder.append_cflag("-Wno-covered-switch-default")
    context.builder.append_cflag("-Wno-unused-template")
    # disable some of the c++ features that are unused
    context.builder.append_cflag("-fno-rtti")
    context.builder.append_cflag("-fno-exceptions")
    context.builder.append_cflag("-fno-threadsafe-statics")
    context.builder.append_cflag("-fcoroutines-ts")
    # context.builder.append_cflag("-ftime-trace")
    if context.defined(MODE="test"):
        luminaire.toolchain.OPTIMIZED(context.builder,optimize='s')
        luminaire.toolchain.PRUNE(context.builder)
        
        context.builder.append_cflag('-g3')
        context.builder.append_lflag('-g3')
        context.builder.append_cflag('-ggdb')
        context.builder.append_lflag('-ggdb')
        context.builder.append_lflag('-O2')
        # link-time optimization directives
        add_lto(context.builder)

        context.builder.append_cflag("-Wno-global-constructors")
        context.builder.append_cflag("-Wno-exit-time-destructors")
        context.builder.append_cflag("-Wno-error=deprecated-declarations")
        context.builder.append_cflag("-Wno-float-equal")

        # add_sanitizers(context.builder)
    if context.defined(MODE="debug"):
        luminaire.toolchain.OPTIMIZED(context.builder,optimize='s')
        luminaire.toolchain.PRUNE(context.builder)
        context.builder.append_cflag('-g3')
        context.builder.append_lflag('-g3')
        context.builder.append_cflag('-ggdb')
        context.builder.append_lflag('-ggdb')
        context.builder.append_lflag("-lm")
        
        context.builder.append_cflag("-Wno-global-constructors")
        context.builder.append_cflag("-Wno-exit-time-destructors")
        context.builder.append_cflag("-Wno-error-deprecated-declarations")
        context.builder.append_cflag("-Wno-float-equal")
    if context.defined(MODE="sanitize"):
        luminaire.toolchain.OPTIMIZED(context.builder,optimize='3')
        luminaire.toolchain.STRIP(context.builder)
        luminaire.toolchain.PRUNE(context.builder)       
        add_lto(context.builder)
        
        context.builder.append_cflag("-Wno-error-global-constructors")
        context.builder.append_cflag("-Wno-error-exit-time-destructors")
        context.builder.append_cflag("-Wno-error-deprecated-declarations")
        context.builder.append_cflag("-Wno-error-float-equal")

        add_sanitizers(context.builder)

    context.builder.append_lflag("-lm")


    context.builder.append_cflag("-fdiagnostics-show-template-tree")



    context.builder.append_cflag("-isystem packages/cpputest/include")
    context.builder.append_sys_include("packages/duck_invoke/include")
    context.builder.append_include("include")
    context.builder.append_include("test-platform")
    context.builder.append_include(".")
    context.builder.append_sys_include("/home/gharris/ikos/install/include")
    context.search(path="src/main.cc",condition=condition)
    context.search(path="packages/cpputest/src/Platforms/Gcc",condition=condition)
    context.search(path="packages/cpputest/src/CppUTest",condition=condition)
    context.search(path="test",condition=condition)
    
    context.builder.append_lflag(context.format("-Wl,-Map=build/{ARCH}/{MODE}/output.map"))

    setattr(context, "analyzer", None)
    context.analyzer = source.builder.clang_tidy.Analyzer(capture=False)
    context.analyzer.append_check("-cppcoreguidelines-macro-usage")

@Frontend.rule(["build/{ARCH}/{MODE}/*.o"],["build/{ARCH}/{MODE}/unittest"])
def link(context,inputs,outputs):
    context.builder.link_executable(inputs[0],outputs[0])
@Frontend.rule(["%.{cc,cpp}"],["build/{ARCH}/{MODE}/{0}.o","build/{ARCH}/{MODE}/{0}.d"])
def compile_analyze_source(context,inputs,outputs):
    def build_it():
        context.builder.compile_source(inputs[0],outputs[0])
        context.builder.perform_search(context,transform,outputs[1])
    if "packages/cpputest" in str(inputs[0]):
        with context.builder.push_cflags("-Wno-everything"):
            build_it()
    else: 
        build_it()

        if "src/" in str(inputs[0]):
            context.analyzer.analyze_source(inputs[0])
        elif "test/" in str(inputs[0]):
            checks = [
                "-cppcoreguidelines-avoid-magic-numbers"
            ]

            if "test-format.cc" in str(inputs[0]):
                checks += [
                    "-cppcoreguidelines-pro-bounds-array-to-pointer-decay",
                    "-cppcoreguidelines-avoid-c-arrays",
                    "-readability-qualified-auto"
                ]

            with context.analyzer.push_checks(*checks):
                context.analyzer.analyze_source(inputs[0])
                # pass

